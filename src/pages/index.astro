---	
import { Markdown } from 'astro/components';
import Page from '../layouts/Page.astro';
import Waypoint from '../components/Waypoint.svelte';
---
<Page title="Threeasy">

<Markdown>
	Threeasy is a wrapper around ThreeJS that lets you get set up fast, so you can get making things quicker!

	You can follow the guide here, or jump straight into the [examples](/examples).
	
	## How does Threeasy work?

	Threeasy wraps around ThreeJS doing all the boilerplate setup for you. It sets up and tidies away `Scene`, `Camera`, `Renderer`, and animations for you. That means that new users have less distractions as the learn, and advanced users can just get going quicker!

	
	How much quicker is it? Here's everything you need to get a static cube on screen.

	<Demo title="Basic Threeasy App" url="focused-dream-itr9e">
		
	<Code code={`import * as THREE from "https://cdn.skypack.dev/three";
import Threeasy from "https://cdn.skypack.dev/threeasy";

const app = new Threeasy(THREE);

const mat = new THREE.MeshBasicMaterial({ color: "white" });
const geo = new THREE.BoxGeometry();

const mesh = new THREE.Mesh(geo, mat);

app.scene.add(mesh);`} lang="js" />
  </Demo>

	What we've done here is initialised a new instance of `Threeasy`. This immediately set up the following for you.

	<ul>
		<li>`Scene`</li>
		<li>`Renderer`</li>
		<li>`Camera`</li>
		<li>`Light`</li>
		<li>Animation Loop</li>
		<li>Loading Manager</li>
		<li>Resizing watcher</li>
	</ul>

	Then we set up a `material`, `geometry` and `mesh`, just like we normally would in ThreeJS. Then we add the mesh to the `Scene`, which has been passed to us by Threeast as part of the `app` variable.

</Markdown>
<Waypoint 
  next={{url:'/inline-animations',title:"Inline Animations"}}
/>
</Page>