---	
import { Code,Markdown } from 'astro/components';
import Demo from '../components/Demo.svelte';
import Page from '../layouts/Page.astro';
import Waypoint from '../components/Waypoint.svelte';
---
<Page title="Threeasy">
<Markdown>
	## Why Threeasy?

	The learning curve for ThreeJS is quite steep. It can take months to get to grips with it and its concepts. Threeasy aims to simplify the initial few weeks of getting used to ThreeJS's concepts, disclosing complexity at their own pace.
	
	## How does Threeasy work?

	Threeasy is a wrapper around ThreeJS, attempting to ease the learning curve for the framework. It achieves this by tidying away and setting up advanced concepts like the `Scene`, `Carmera`, `Renderer`, and animations for you.

	This lets the new learner focus on what's fun first, like setting up geometries and materials.

	EG Here's everything you need to get a static cube on screen.

	<Demo title="Basic Threeasy App" url="focused-dream-itr9e">
		
	<Code code={`import * as THREE from "https://cdn.skypack.dev/three";
import Threeasy from "https://cdn.skypack.dev/threeasy";

const app = new Threeasy(THREE);

const mat = new THREE.MeshBasicMaterial({ color: "white" });
const geo = new THREE.BoxGeometry();

const mesh = new THREE.Mesh(geo, mat);

app.scene.add(mesh);`} lang="js" />
  </Demo>

	What we've done here is initialised a new instance of `Threeasy`. This immediately set up the following for you.

	<ul>
		<li>`Scene`</li>
		<li>`Renderer`</li>
		<li>`Camera`</li>
		<li>`Light`</li>
		<li>Animation Loop</li>
		<li>Loading Manager</li>
		<li>Resizing watcher</li>
	</ul>

	Then we set up a `material`, `geometry` and `mesh`, just like we normally would in ThreeJS. Then we add the mesh to the `Scene`, which is part of the `app` variable now.

	

	

	

	

	
</Markdown>
<Waypoint 
  next={{url:'/inline-animations',title:"Inline Animations"}}
/>
</Page>